'''
A class that describes a bid that was made.
It is generated by the bidder and sent to all the players (including
the bidder) for processing.
'''

from infoLog import Log
from enums import *
from utils import *
from bidUtils import *


class BidNotif:

    def __init__(self, bidLevel, bidSuit, teamState):
        self.bid = (bidLevel, bidSuit)
        self.minPoints = teamState.myMinPoints
        self.maxPoints = teamState.myMaxPoints
        self.convention = teamState.convention
        self.force = teamState.force
        self.suitState = teamState.suitState.copy()
        self.gameState = teamState.gameState

    # This function creates a bid based on a proposal.
    # The actual bid returned, in the form of a BidNotif, may be different
    # from the proposed bid. A proposed bid will be changed if it is not
    # above the current highest bid at the table.
    def __init__(self, player, bidLevel, bidSuit, convention=Conv.NATURAL, force=Force.NONE):
        # Start by initializing the notification with info in the player's team state
        self.bid = (bidLevel, bidSuit)
        self.minPoints = player.teamState.myMinPoints
        self.maxPoints = player.teamState.myMaxPoints
        self.suitState = player.teamState.suitState.copy()
        self.gameState = player.teamState.gameState
        self.convention = player.teamState.convention
        self.force = player.teamState.force

        # Clear the convention and force from the team state
        player.teamState.convention = Conv.NATURAL
        player.teamState.force = Force.NONE
        
        # Take the convention and force parameters from the input
        if convention != Conv.NATURAL:
            self.convention = convention
        if force != Force.NONE:
            self.force = force
        
        # If the proposed bid is to PASS, no further verification is required
        if bidLevel == 0:
            return

        # Otherwise, we need to verify this is a legal bid
        # Find the highest bid made at the table so far
        (maxLevel, maxSuit) = findLargestTableBid(player.table)
        maxBidStr = getBidStr(maxLevel, maxSuit)
        proposedBidStr = getBidStr(bidLevel, bidSuit)
        if maxLevel > bidLevel:
            # Competitors already bid higher than my bid. Return pass
            Log.write("createBid: my bid of %s was squashed by %s\n" % (proposedBidStr, maxBidStr))
            self.bid = (0, Suit.ALL)
            self.convention = Conv.NATURAL
            self.force = Force.NONE
            return
        elif maxLevel == bidLevel:
            if maxSuit.value <= bidSuit.value:
                Log.write("createBid: my bid of %s was squashed by %s\n" % (proposedBidStr, maxBidStr))
                player.role = PlayerRole.NONE
                self.bid = (0, Suit.ALL)
                self.convention = Conv.NATURAL
                self.force = Force.NONE
                return


    def updateWithBidnode(self, player, bidNode):
        if player.playerRole == PlayerRole.OPENER:
            self.minPoints = bidNode.openerMinPoints
            self.maxPoints = bidNode.openerMaxPoints
        elif player.playerRole == PlayerRole.RESPONDER:
            self.minPoints = bidNode.responderMinPoints
            self.maxPoints = bidNode.responderMaxPoints
        elif player.playerRole == PlayerRole.NONE:
            self.minPoints = bidNode.openerMinPoints
            self.maxPoints = bidNode.openerMaxPoints
        else:
            print("updateWithBidnode: invalid player role")
            Log.write("updateWithBidnode: invalid player role\n")
        self.convention = bidNode.convention
        self.force = bidNode.force
        self.suitState = bidNode.suitState.copy()
        self.gameState = GameState.UNKNOWN
        teamMinPoints = bidNode.openerMinPoints + bidNode.responderMinPoints
        if teamMinPoints >= 18:
            self.gameState = GameState.PARTSCORE
        if bidNode.force == Force.GAME:
            self.gameState = GameState.GAME

        
    def show(self):
        bidStr = getBidStr(self.bid[0], self.bid[1])
        Log.write("bidNotif: show: bid={} conv={} force={} state={}\n".format(bidStr, self.convention.name, self.force.name, self.gameState.name))
        # print("notif suit state {}".format(self.suitState))
        
    def processStaymanResponse(self, player, teamState):
        print("processStaymanResponse")
        if self.bid[1] == Suit.DIAMOND and self.bid[0] == 2:
            # No fit in major
            teamState.suitState[Suit.HEART] = FitState.NO_SUPPORT
            teamState.suitState[Suit.SPADE] = FitState.NO_SUPPORT
        elif self.bid[1] == Suit.HEART:
            # Do I have 4+ hearts
            if player.hand.getNumCardsInSuit(Suit.HEART) >= 4:
                teamState.suitState[Suit.HEART] = FitState.SUPPORT
                teamState.fitSuit = Suit.HEART
        elif self.bid[1] == Suit.SPADE:
            # Do I have 4+ spades
            if player.hand.getNumCardsInSuit(Suit.SPADE) >= 4:
                teamState.suitState[Suit.SPADE] = FitState.SUPPORT
                teamState.fitSuit = Suit.SPADE
        
    def processJacobyResponse(self, player):
        Log.write("processJacobyResponse: no action taken")
     
    def processMajorLimit(self, ts):
        Log.write("processing Major Limit notification")
        # Responder has support for bid major and 11-12 points
        openingSuit = ts.candidateSuit
        ts.suitState[openingSuit] = FitState.SUPPORT
        ts.partnerMinPoints = 11
        ts.partnerMaxPoints = 12
    
    def processJacoby2NT(self, ts):
        Log.write("processing Jacoby 2NT notification")
        # Responder has 4+ card support for bid major and 13+ points
        openingSuit = ts.candidateSuit
        ts.suitState[openingSuit] = FitState.SUPPORT
        ts.partnerMinPoints = 13
        ts.partnerMaxPoints = 27
        ts.convention = self.convention
    
    def processBlackwoodResponse(self, ts):
        Log.write("processing Blackwood response\n")
        if self.bid[0] == 5:
            if self.bid[1] == Suit.CLUB:
                ts.partnerNumAces = 4
            elif self.bid[1] == Suit.DIAMOND:
                ts.partnerNumAces = 1
            elif self.bid[1] == Suit.HEART:
                ts.partnerNumAces = 2
            elif self.bid[1] == Suit.SPADE:
                ts.partnerNumAces = 3
        elif self.bid[0] == 6:
            if self.bid[1] == Suit.CLUB:
                ts.partnerNumKings = 4
            elif self.bid[1] == Suit.DIAMOND:
                ts.partnerNumKings = 1
            elif self.bid[1] == Suit.HEART:
                ts.partnerNumKings = 2
            elif self.bid[1] == Suit.SPADE:
                ts.partnerNumKings = 3

    def processGerberResponse(self, ts):
        if self.bid[0] == 4:
            if self.bid[1] == Suit.DIAMOND:
                ts.partnerNumAces = 4
            elif self.bid[1] == Suit.HEART:
                ts.partnerNumAces = 1
            elif self.bid[1] == Suit.SPADE:
                ts.partnerNumAces = 2
            elif self.bid[1] == Suit.NOTRUMP:
                ts.partnerNumAces = 3
        elif self.bid[0] == 5:
            if self.bid[1] == Suit.DIAMOND:
                ts.partnerNumKings = 4
            elif self.bid[1] == Suit.HEART:
                ts.partnerNumKings = 1
            elif self.bid[1] == Suit.SPADE:
                ts.partnerNumKings = 2
            elif self.bid[1] == Suit.NOTRUMP:
                ts.partnerNumKings = 3

    def processCuebidResponse(self):
        Log.write("processCuebidResponse: no action taken")

    def processSplinterResponse(self, ts):
        Log.write("processing Splinter notification\n")
        # Responder has 4+ card support for bid major and 13+ points
        openingSuit = ts.candidateSuit
        ts.suitState[openingSuit] = FitState.SUPPORT
        ts.partnerMinPoints = 13
        ts.partnerMaxPoints = 27
        ts.convention = Conv.NATURAL
        
    def notifHandler(self, player):
        teamState = player.teamState
        bidSeq = teamState.bidSeq
        numBids = len(bidSeq)
        # Check if the first bid was a pass
        if bidSeq[0][0] == 0:
            # print("First bid was a pass")
            numBids -= 1
            
        bidSeqStr = ''        
        for bid in teamState.bidSeq:
            bidStr = getBidStr(bid[0], bid[1])
            bidSeqStr += bidStr + "-"
        Log.write("notifHandler: %s processing notif for bid seq %s\n" % (player.pos.name, bidSeqStr))
        
        # Merge this notification into a team state
        # Update fit suit
        for (suit, fitState) in self.suitState.items():
            if teamState.suitState[suit] == FitState.UNKNOWN:
                teamState.suitState[suit] = fitState
            if teamState.fitSuit == Suit.ALL and teamState.suitState[suit] == FitState.SUPPORT:
                teamState.fitSuit = suit

        # Candidate suit depends upon fit state
        self.show()
        if self.bid[0] > 0:
            if self.suitState[self.bid[1]] == FitState.UNKNOWN and self.convention == Conv.NATURAL:
                teamState.candidateSuit = self.bid[1]
            
        teamState.partnerMinPoints = self.minPoints
        teamState.partnerMaxPoints = self.maxPoints

        if player.playerRole == PlayerRole.OPENER:
            distMethod = DistMethod.HCP_LONG
        elif player.playerRole == PlayerRole.RESPONDER:
            distMethod = DistMethod.HCP_SHORT
        else:    
            distMethod = DistMethod.HCP_LONG
        (myHcPts, myDistPts) = player.hand.evalHand(distMethod)
        myTotalPts = myHcPts + myDistPts
        teamState.teamMinPoints = teamState.partnerMinPoints + myTotalPts
        teamState.teamMaxPoints = teamState.partnerMaxPoints + myTotalPts
        
        if self.convention == Conv.STAYMAN_RSP:
            self.processStaymanResponse(player, teamState)
        elif self.convention == Conv.JACOBY_XFER_RSP:
            self.processJacobyResponse(player)
        elif self.convention == Conv.MAJOR_LIMIT:
            self.processMajorLimit(teamState)
        elif self.convention == Conv.JACOBY_2NT:
            self.processJacoby2NT(teamState)
        elif self.convention == Conv.BLACKWOOD_RSP:
            self.processBlackwoodResponse(teamState)
        elif self.convention == Conv.GERBER_RSP:
            self.processGerberResponse(teamState)
        elif self.convention == Conv.CUE_BID:
            self.processCuebidResponse()
        elif self.convention == Conv.SPLINTER:
            self.processSplinterResponse(teamState)
        # The remaining conventions all need to be processed when this player bids next. Save the convention in the player's team state    
        elif self.convention == Conv.NATURAL:
            teamState.convention = self.convention
        elif self.convention == Conv.STAYMAN_REQ:
            teamState.convention = self.convention
        elif self.convention == Conv.JACOBY_XFER_REQ:
            teamState.convention = self.convention
        elif self.convention == Conv.TWO_OVER_ONE:
            teamState.convention = self.convention
        elif self.convention == Conv.BLACKWOOD_REQ:
            teamState.convention = self.convention
        elif self.convention == Conv.GERBER_REQ:
            teamState.convention = self.convention
        else:
            print("notifHandler: did not handle convention %s" % self.convention.name)

        # Check how many cards are promised by opener
        # print("bidNotif: bid seq is {}".format(teamState.bidSeq))
        openingBid = getOpeningBid(teamState.bidSeq)
        if player.table.roundNum == 1 and numBids == 1:
            bidSuit = self.bid[1]
            numCardsInBidSuit = player.hand.getNumCardsInSuit(bidSuit)
            if isMajor(bidSuit):
                # Check if I have 3+ card support
                if numCardsInBidSuit >= 3:
                    teamState.suitState[bidSuit] = FitState.SUPPORT
            elif bidSuit == Suit.DIAMOND:
                # Check if I have 4+ card support
                if numCardsInBidSuit >= 4:
                    teamState.suitState[bidSuit] = FitState.SUPPORT
            elif bidSuit == Suit.CLUB:
                # Check if I have 5+ card support
                if numCardsInBidSuit >= 5:
                    teamState.suitState[bidSuit] = FitState.SUPPORT
           
        # Check if partner bid a new suit
        teamState.force = self.force
        if isBidNewSuit(teamState.bidSeq):
            teamState.force = Force.ONE_ROUND
            # This promises 4+ cards. Do I have 4+ cards in this suit?
            newSuit = self.bid[1]
            numCardsInBidSuit = player.hand.getNumCardsInSuit(newSuit)
            if numCardsInBidSuit >= 4:
                # We have support
                teamState.suitState[newSuit] = FitState.SUPPORT

        # Check if opener rebid their opening suit, promising 6+ cards
        bidSuit = self.bid[1]
        if openingBid[1] == bidSuit and player.table.roundNum == 2:
            # Check if I have 2+ card support
            numCardsInBidSuit = player.hand.getNumCardsInSuit(bidSuit)
            if numCardsInBidSuit >= 2:
                # We have support
                teamState.suitState[bidSuit] = FitState.SUPPORT
            
        # Don't update the bid sequence here. It was already done in
        # the player's notification handler
        if player.playerRole == PlayerRole.OPENER:
            # The opener copies the game state from the notification
            if self.gameState.value > teamState.gameState.value:
                teamState.gameState = self.gameState
        elif player.playerRole == PlayerRole.RESPONDER:
            # The responder sets the game state            
            if isMinor(teamState.fitSuit):
                minGamePts = 29
            else: 
                minGamePts = 26
            if teamState.teamMinPoints < minGamePts:
                teamState.gameState = GameState.PARTSCORE
            elif teamState.teamMinPoints < 33:
                teamState.gameState = GameState.GAME
            elif teamState.teamMinPoints < 36:
                teamState.gameState = GameState.SMALL_SLAM
            else:
                teamState.gameState = GameState.LARGE_SLAM
            Log.write("%s set game state to %s\n" % (player.pos.name, teamState.gameState.name))    
                        
    

